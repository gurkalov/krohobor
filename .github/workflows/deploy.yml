name: CI

on: [push]

jobs:
  linter:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Golint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: src

  unit_test:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Format
        run: cd src && if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
      - name: Unit tests
        run: cd src && go test ./... -v

  image_test:
    runs-on: ubuntu-20.04
    needs: [linter, unit_test]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: gurkalov/krohobor:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      - name: Load Docker image
        run: docker load --input /tmp/myimage.tar
      - name: Copy config
        run: cp .env.example .env
      - name: Build the docker-compose stack
        run: docker-compose -f docker-compose.yml up -d
      - name: Check running containers
        run: docker ps -a
      - name: Image tests
        run: cd tests && go test ./... -v
      - name: Upload image artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  push:
    runs-on: ubuntu-20.04
    needs: [image_test]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a | grep gurkalov/krohobor
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: gurkalov
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push image
        run: |
          docker image tag gurkalov/krohobor:latest gurkalov/krohobor:${{ github.sha }}
          docker image push --all-tags gurkalov/krohobor
